# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PlaybookInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, playbook: str=None, limit: str=None, extra_vars: str=None):  # noqa: E501
        """PlaybookInput - a model defined in Swagger

        :param playbook: The playbook of this PlaybookInput.  # noqa: E501
        :type playbook: str
        :param limit: The limit of this PlaybookInput.  # noqa: E501
        :type limit: str
        :param extra_vars: The extra_vars of this PlaybookInput.  # noqa: E501
        :type extra_vars: str
        """
        self.swagger_types = {
            'playbook': str,
            'limit': str,
            'extra_vars': str
        }

        self.attribute_map = {
            'playbook': 'playbook',
            'limit': 'limit',
            'extra_vars': 'extra-vars'
        }

        self._playbook = playbook
        self._limit = limit
        self._extra_vars = extra_vars

    @classmethod
    def from_dict(cls, dikt) -> 'PlaybookInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlaybookInput of this PlaybookInput.  # noqa: E501
        :rtype: PlaybookInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def playbook(self) -> str:
        """Gets the playbook of this PlaybookInput.

        playbook to run  # noqa: E501

        :return: The playbook of this PlaybookInput.
        :rtype: str
        """
        return self._playbook

    @playbook.setter
    def playbook(self, playbook: str):
        """Sets the playbook of this PlaybookInput.

        playbook to run  # noqa: E501

        :param playbook: The playbook of this PlaybookInput.
        :type playbook: str
        """
        if playbook is None:
            raise ValueError("Invalid value for `playbook`, must not be `None`")  # noqa: E501

        self._playbook = playbook

    @property
    def limit(self) -> str:
        """Gets the limit of this PlaybookInput.

        further limit selected hosts to an additional pattern  # noqa: E501

        :return: The limit of this PlaybookInput.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit: str):
        """Sets the limit of this PlaybookInput.

        further limit selected hosts to an additional pattern  # noqa: E501

        :param limit: The limit of this PlaybookInput.
        :type limit: str
        """

        self._limit = limit

    @property
    def extra_vars(self) -> str:
        """Gets the extra_vars of this PlaybookInput.

        set additional variables as key=value  # noqa: E501

        :return: The extra_vars of this PlaybookInput.
        :rtype: str
        """
        return self._extra_vars

    @extra_vars.setter
    def extra_vars(self, extra_vars: str):
        """Sets the extra_vars of this PlaybookInput.

        set additional variables as key=value  # noqa: E501

        :param extra_vars: The extra_vars of this PlaybookInput.
        :type extra_vars: str
        """

        self._extra_vars = extra_vars
