# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PlaybookResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, stdout_lines: List[str]=None, stderr_lines: List[str]=None, rc: int=None):  # noqa: E501
        """PlaybookResult - a model defined in Swagger

        :param stdout_lines: The stdout_lines of this PlaybookResult.  # noqa: E501
        :type stdout_lines: List[str]
        :param stderr_lines: The stderr_lines of this PlaybookResult.  # noqa: E501
        :type stderr_lines: List[str]
        :param rc: The rc of this PlaybookResult.  # noqa: E501
        :type rc: int
        """
        self.swagger_types = {
            'stdout_lines': List[str],
            'stderr_lines': List[str],
            'rc': int
        }

        self.attribute_map = {
            'stdout_lines': 'stdout_lines',
            'stderr_lines': 'stderr_lines',
            'rc': 'rc'
        }

        self._stdout_lines = stdout_lines
        self._stderr_lines = stderr_lines
        self._rc = rc

    @classmethod
    def from_dict(cls, dikt) -> 'PlaybookResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlaybookResult of this PlaybookResult.  # noqa: E501
        :rtype: PlaybookResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stdout_lines(self) -> List[str]:
        """Gets the stdout_lines of this PlaybookResult.

        lines of stdout  # noqa: E501

        :return: The stdout_lines of this PlaybookResult.
        :rtype: List[str]
        """
        return self._stdout_lines

    @stdout_lines.setter
    def stdout_lines(self, stdout_lines: List[str]):
        """Sets the stdout_lines of this PlaybookResult.

        lines of stdout  # noqa: E501

        :param stdout_lines: The stdout_lines of this PlaybookResult.
        :type stdout_lines: List[str]
        """
        if stdout_lines is None:
            raise ValueError("Invalid value for `stdout_lines`, must not be `None`")  # noqa: E501

        self._stdout_lines = stdout_lines

    @property
    def stderr_lines(self) -> List[str]:
        """Gets the stderr_lines of this PlaybookResult.

        lines of stderr  # noqa: E501

        :return: The stderr_lines of this PlaybookResult.
        :rtype: List[str]
        """
        return self._stderr_lines

    @stderr_lines.setter
    def stderr_lines(self, stderr_lines: List[str]):
        """Sets the stderr_lines of this PlaybookResult.

        lines of stderr  # noqa: E501

        :param stderr_lines: The stderr_lines of this PlaybookResult.
        :type stderr_lines: List[str]
        """
        if stderr_lines is None:
            raise ValueError("Invalid value for `stderr_lines`, must not be `None`")  # noqa: E501

        self._stderr_lines = stderr_lines

    @property
    def rc(self) -> int:
        """Gets the rc of this PlaybookResult.

        return code of playbook  # noqa: E501

        :return: The rc of this PlaybookResult.
        :rtype: int
        """
        return self._rc

    @rc.setter
    def rc(self, rc: int):
        """Sets the rc of this PlaybookResult.

        return code of playbook  # noqa: E501

        :param rc: The rc of this PlaybookResult.
        :type rc: int
        """
        if rc is None:
            raise ValueError("Invalid value for `rc`, must not be `None`")  # noqa: E501

        self._rc = rc
